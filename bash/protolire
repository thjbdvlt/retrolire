#!/bin/bash

set -e -o pipefail

# default values
isbn_sources="bnf openl wiki goob"
dbname=
method=
identifier=

# data directory, used for templates
data_dir=/usr/share/retrolire/

# parse options:
#   -d dbname
#   -i isbn_sources
while getopts "d:i:m:s:" flag; do
    case "$flag" in
        d) dbname="$OPTARG" ;;
        s) isbn_sources="$OPTARG" ;;
        i) identifier="$OPTARG" ;;
        m) method="$OPTARG" ;;
        *) exit 1;;
    esac
done

# print help message (on error)
_help() {
    [ "$1" ] && echo -e "${1}\n" >/dev/tty
    exit 1
}

# check required parameters
[ "$dbname" ] || _help "missing option: -d DBNAME"
[ "$method" ] || _help "missing parameter: method"
[ "$identifier" ] || _help "missing parameter: identifier/file"

copy_to() {
    csl2psql - -d "$dbname" -t entry --temp _entry
}

from_doi() {
    local result

    # get the reference from the DOI. if no reference is found, exit.
    result="$(isbn_doi2tex "$1")" || _help "no reference for doi $1"

    # isbn_doi2tex returns no error even when nothing is found. 
    # so, it's needed to check that the result is not the help message.
    echo "$result" | head -n 1 | grep -i '^usage' \
        && _help "no reference for doi $1"

    # echo the result
    echo "$result"
}

from_isbn() {
    local ref

    # try with all services to get a reference
    for i in $isbn_sources
    do
        # print the current provider name during the process
        echo "trying with source '$i'" >/dev/tty

        # get the reference metadata
        ref="$(
            isbn_meta "$1" "$i" bibtex 2>/dev/null |
            grep -E -v '^\s*$'
        )" && break
    done

    [ "$ref" ] || _help "couldn't find a reference for isbn $1."

    echo "$ref"
}

edit_template() {
    local f d empty ref

    d="${data_dir}/templates"
    f="${d}/${1}.bib"

    [ -f "$f" ] || f="$(find "$d" -type f | fzf -d / --nth -1 --with-nth -1)"
    [ -f "$f" ] || _help "no file picked: cancelled."

    empty="$(cat "$f")"
    ref="$(echo "$empty" | vipe)"

    [ "$ref" ] || _help "empty: cancelled"
    [ "$ref" != "$empty" ]|| _help "unchanged: cancelled."

    echo "$ref"
}

from_file() {
    [ -f "$2" ] || _help "file not found: $2"
    case "$1" in
        j*) copy_to < "$2" ;;
        b*) pandoc -f bibtex -t csljson < "$2" | copy_to ;;
        *) _help "unrecognized value for {json|bibtex}"
    esac
}

# main command: import entries
import_ref() {
    local ref getter fetch

    fetch=
    id="$1"

    check_name(){
        # function that check if the first argument is the beginning
        # of an available method.
        [[ "$1" =~ ^$id ]] || _help "not a valid argument: $id"
    }

    # check that the word passed as first argument is a valid method.
    case "$1" in
        d*) check_name doi; getter=from_doi; fetch=true;;
        i*) check_name isbn; getter=from_isbn; fetch=true;;
        t*) check_name template; getter=edit_template; fetch=true;;
        b*) check_name bibtex; getter=from_file;;
        j*) check_name json; getter=from_file;;
        *) _help;;
    esac

    unset check_name

    # get entry from doi/isbn
    if [ "$fetch" ]
    then {
        ref="$($getter "$2")"
        csl=$(
            echo "$ref" |
                pandoc -f bibtex -t bibtex |
                vipe |
                pandoc -f bibtex -t csljson
        ) || _help "parsing error: cancelled."
        echo "$csl" | copy_to
    }

    # get entries from file (json/bibtex)
    else from_file "${@}"
    fi
}

# print help
if [ "$1" == "-h" ]
then _help ""
fi

# main command
import_ref "$method" "$identifier"
