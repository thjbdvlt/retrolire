#!/bin/bash
set -e -o pipefail
dbname="${RETROLIRE_DBNAME:=retrolire}"
data_dir=/usr/share/retrolire/
isbn=

help="retrolire add {doi|isbn|template|json|bibtex} {FILEPATH|DOI|ISBN} [--tag TAGS] [--isbn-sources SOURCES]"

_help() {
    echo -e "usage:\n      $help\n" >/dev/tty
    [ "$1" ] && echo -e "$1\n" >/dev/tty
    exit 1
}

copy_to() {
    csl2psql - -d "$dbname" -t entry --temp _entry
}

get_doi() {
    local result
    [ "$1" ] || _help "needs a value (doi): cancelled."
    result="$(isbn_doi2tex "$1")" ||
        _help "couldn't find a reference for doi $1: cancelled"
    echo "$result" | head -n 1 | grep -i '^usage' \
        && _help "couldn't find a reference for doi $1: cancelled"
    echo "$result"
}

get_isbn() {
    local ref
    [ "$1" ] || _help "needs a value (isbn): cancelled."
    isbn="${isbn:=bnf openl wiki loc goob}"
    for i in $isbn
    do
        echo "trying with source '$i'" >/dev/tty
        ref="$(isbn_meta "$1" "$i" bibtex 2>/dev/null |
            grep -E -v '^\s*$' )" && break
    done
    [ "$ref" ] || _help "couldn't find a reference for isbn $1."
    echo "$ref"
}

edit_template() {
    local f d empty ref
    d="${data_dir}/templates"
    f="${d}/${1}.bib"
    [ -f "$f" ] || f="$(find "$d" -type f | fzf -d / --nth -1 --with-nth -1)"
    [ -f "$f" ] || _help "no file picked: cancelled."
    empty="$(cat "$f")"
    ref="$(echo "$empty" | vipe)"
    [ "$ref" ] || _help "empty: cancelled"
    [ "$ref" != "$empty" ]|| _help "unchanged: cancelled."
    echo "$ref"
}

from_file() {
    [ -f "$2" ] || _help "file not found: $2"
    case "$1" in
        j*) copy_to < "$2" ;;
        b*) pandoc -f bibtex -t csljson < "$2" | copy_to ;;
        *) _help "unrecognized value for {json|bibtex}"
    esac
}

import_ref() {
    local ref getter fetch
    fetch=
    case "$1" in
        d*) [[ 'doi' =~ ^$1 ]] || _help "not a valid argument: $1"
            getter=get_doi; fetch=true;;
        i*) [[ 'isbn' =~ ^$1 ]] || _help "not a valid argument: $1"
            getter=get_isbn; fetch=true;;
        t*) [[ 'template' =~ ^$1 ]] || _help "not a valid argument: $1"
            getter=edit_template; fetch=true;;
        b*) [[ 'bibtex' =~ ^$1 ]] || _help "not a valid argument: $1"
            getter=from_file;;
        j*) [[ 'json' =~ ^$1 ]] || _help "not a valid argument: $1"
            getter=from_file;;
        *) _help;;
    esac
    if [ "$fetch" ]
    then {
        ref="$($getter "$2")"
        csl=$(echo "$ref" | pandoc -f bibtex -t bibtex | vipe | pandoc -f bibtex -t csljson) ||
            _help "parsing error: cancelled."
        echo "$csl" | copy_to
    }
    else {
        from_file "${@}"
    }
    fi
}

if [ "$1" == "-h" ]
then
    _help ""
fi

import_ref "${@}" "$(cat /dev/stdin)"
